version: "3.9"
services:
    app:
        container_name: todo_app_container
        environment:
            - POSTGRES_USER=${DB_USER}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
            - POSTGRES_DB=${DB_NAME}
            - DATABASE_HOST=${DB_HOST}
            - DATABASE_PORT=${DB_PORT}
            - TEST_POSTGRES_USER=${TEST_DB_USER}
            - TEST_POSTGRES_PASSWORD=${TEST_DB_PASSWORD}
            - TEST_POSTGRES_DB=${TEST_DB_NAME}
            - TEST_DATABASE_HOST=${TEST_DB_HOST}
            - TEST_DATABASE_PORT=${TEST_DB_PORT}
        tty: true
        build: .
        ports:
            - 8081:8081
        restart: on-failure
        volumes:
            - .:/app
        depends_on:
            - postgresdb
        networks:
            - todo_app_net

    postgresdb:
        image: postgres:15.1-alpine
        container_name: postgres_container
        environment:
            - POSTGRES_USER=${DB_USER}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
            - POSTGRES_DB=${DB_NAME}
            - DATABASE_HOST=${DB_HOST}
        ports:
            - "21212:5432"
        volumes:
            - ~/cachedatafordb:/var/lib/postgresql/data
        networks:
            - todo_app_net

    postgresdb_test:
        image: postgres:15.1-alpine
        container_name: postgres_test_container
        environment:
            - POSTGRES_USER=${TEST_DB_USER}
            - POSTGRES_PASSWORD=${TEST_DB_PASSWORD}
            - POSTGRES_DB=${TEST_DB_NAME}
            - DATABASE_HOST=${TEST_DB_HOST}
        ports:
            - "5432:5432"
        volumes:
            - ~/cachedatafordb:/var/lib/postgresql/data
        networks:
            - todo_app_net
volumes:
    psql:
    psql_test:
# Networks to be created to facilitate communication between containers
networks:
    learning:
        driver: bridge
# Since our docker-compose.yml uses an environment variable, we need to set it up through the .env file, which should be placed on the root project directory.

# DB_HOST=postgresdb
# DB_DRIVER=postgres
# DB_USER=spuser
# DB_PASSWORD=SPuser96
# DB_NAME=project
# DB_PORT=5432

# Postgres Test
# TEST_DB_HOST=postgres_test
# TEST_DB_DRIVER=postgres
# TEST_DB_USER=spuser
# TEST_DB_PASSWORD=SPuser96
# TEST_DB_NAME=project_test
# TEST_DB_PORT=5432
# The above basic setup will only work in the same container used. A new empty container will be created whenever the Docker container needs to be rebooted or when a Docker run is being executed. The data that is being stored on the previous container will be lost.
# To deal with that issue, store our Postgres data inside a mounted volume.

# First, create a new directory, e.g., "pg_data". After that, inside the docker-compose.yml, mount your host directory to "/var/lib/postgresql/data" directory under the volumes keyword. The updated docker-compose.yml will look like the snippet below.
